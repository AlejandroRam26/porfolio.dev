---
import ArrowRight from "../icons/ArrowRight.astro";
import LinkedButton from "./LinkedButton.astro";
import Tags, { TAGS } from "./Tags.astro";
interface Props {
  title: string;
  description: string;
  image?: string;
  link?: string;
  github?: string;
  tags?: string[]; // Corregido el tipo de la propiedad 'tags'
}
const { title, description, image, link, github, tags } = Astro.props;
---

<article
  class={`relative border-2 rounded-xl shadow-md
  border-white/70
  bg-[#050505]/50
  shadow-slate-500/50
  hover:shadow-lg
  hover:border-indigo-300/70
  hover:shadow-indigo-300/50
  transition overflow-hidden group`}
>
  <div
    class="absolute top-0 bottom-0 left-0 right-0 z-10
      bg-gradient-to-b from-transparent via-slate-900/70 via-40% to-black to-95%"
  >
  </div>
  {
    image && (
      <div
        class="absolute left-0 top-0 bottom-0 w-full h-full
      group-hover:scale-110 transition-scale duration-300
      bg-blend-luminosity bg-center bg-cover bg-no-repeat bg-blue-500
      z-0"
        style={`background-image: url(${image});`}
      />
    )
  }
  <div class="relative flex flex-col gap-3 justify-end h-full
  p-5 z-20">
    <h1 class="text-xl font-medium text-balance">{title}</h1>
    <div>
      <p class="text-pretty max-w-[50ch] opacity-85" set:html={description} />
    </div>
    <nav
      class="flex flex-row gap-3 flex-wrap justify-start items-center pointer-events-none"
    >
      {tags && tags.map((tag) => <Tags tag={tag} />)}
    </nav>
    {
      link && github && (
        <nav class="flex flex-row gap-3">
          {link && (
            <LinkedButton href={link}>
              Ver... <ArrowRight />
            </LinkedButton>
          )}
          {github && (
            <LinkedButton href={github}>
              GitHub... <ArrowRight />
            </LinkedButton>
          )}
        </nav>
      )
    }
  </div>
</article>
